@model TeamStatModel
@{
    ViewData["Title"] = "TeamStats";
}

<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="https://code.highcharts.com/modules/export-data.js"></script>
<script src="https://code.highcharts.com/modules/accessibility.js"></script>

<div class="text-center">

    <div class="row">
        <div class="col">

        </div>
        <div class="col">
            <h1 class="display-4">@Model.TeamName</h1>
        </div>
        <div class="col">
            <img src=@Model.TeamLogo style="width:auto; height:100px;" />
        </div>
    </div>

    <br />

    <div class="container">
        <div class="row">
            <div class="col-3 home">Home Results</div>
            <div class="col-3 home">Home Avg Margin</div>
            <div class="col-3 away">Away Avg Margin</div>
            <div class="col-3 away">Away Results</div>
        </div>
        <div class="row">
            <div class="col-3"><b style="color: green">@Model.HomeWins</b>/<b style="color: red">@Model.HomeLosses</b>/<b>@Model.HomeDraws</b></div>
            <div class="col-3 home"><b>@Model.HomeMargin</b></div>
            <div class="col-3 away"><b>@Model.AwayMargin</b></div>
            <div class="col-3"><b style="color: green">@Model.AwayWins</b>/<b style="color: red">@Model.AwayLosses</b>/<b>@Model.AwayDraws</b></div>
        </div>
        <div class="row">
            <div class="col-4 home">Home Win %</div>
            <div class="col-4">Overall Win %</div>
            <div class="col-4 away">Away Win %</div>
        </div>
        <div class="row">
            <div class="col-4 home"><b>@Model.HomeWinPercentage %</b></div>
            <div class="col-4"><b>@Model.OverallWinPercentage %</b></div>
            <div class="col-4 away"><b>@Model.AwayWinPercentage %</b></div>
        </div>

        <br />

        @{
            if (Model.NextFixtureHomeTeam == @Model.TeamName)
            {
                <div class="row">
                    <div class="col-4 home">@Model.NextFixtureHomeTeam @Model.HomeWins/@Model.HomeLosses/@Model.HomeDraws</div>
                    <div class="col-4">v</div>
                    <div class="col-4 away">@Model.NextFixtureAwayTeam @Model.OppAwayWins/@Model.OppAwayLosses/@Model.OppAwayDraws</div>
                </div>
            }
            else if (Model.NextFixtureAwayTeam == @Model.TeamName)
            { <div class="row">
                    <div class="col-4">@Model.NextFixtureHomeTeam <b style="color: green">@Model.OppHomeWins</b>/<b style="color: red">@Model.OppHomeLosses</b>/<b>@Model.OppHomeDraws</b></div>
                    <div class="col-4">v</div>
                    <div class="col-4">@Model.NextFixtureAwayTeam <b style="color: green">@Model.AwayWins</b>/<b style="color: red">@Model.AwayLosses</b>/<b>@Model.AwayDraws</b></div>
                </div>
            }
            else
            {

            }
        }

    </div>

    <br />

    <button class="accordion" style="text-align: center;">
        <div>
            <svg class="bi bi-graph-up" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                <path d="M0 0h1v16H0V0zm1 15h15v1H1v-1z" />
                <path fill-rule="evenodd" d="M14.39 4.312L10.041 9.75 7 6.707l-3.646 3.647-.708-.708L7 5.293 9.959 8.25l3.65-4.563.781.624z" />
                <path fill-rule="evenodd" d="M10 3.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V4h-3.5a.5.5 0 0 1-.5-.5z" />
            </svg>
            &nbsp; Goals/Points Per Game
        </div>
    </button>
    <div class="container-fluid panel" width="100%" style="width:100%;">
        <figure class="highcharts-figure" style="align-content:center;">
            <div id="points"></div>
        </figure>
    </div>

    <br />

    <button class="accordion" style="text-align: center;">
        <div>
            <svg class="bi bi-graph-up" style="text-align: center;" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                <path d="M0 0h1v16H0V0zm1 15h15v1H1v-1z" />
                <path fill-rule="evenodd" d="M14.39 4.312L10.041 9.75 7 6.707l-3.646 3.647-.708-.708L7 5.293 9.959 8.25l3.65-4.563.781.624z" />
                <path fill-rule="evenodd" d="M10 3.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V4h-3.5a.5.5 0 0 1-.5-.5z" />
            </svg>
            &nbsp; Wins/Losses
        </div>
    </button>
    <div class="container-fluid panel" width="100%" style="width:100%;">
        <figure class="highcharts-figure" style="align-content:center; height:80%">
            <div id="wins"></div>
        </figure>

    </div>

    <br />

    <button class="accordion" style="text-align: center;">
        <div>
            <svg class="bi bi-graph-up" style="text-align: center;" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                <path d="M0 0h1v16H0V0zm1 15h15v1H1v-1z" />
                <path fill-rule="evenodd" d="M14.39 4.312L10.041 9.75 7 6.707l-3.646 3.647-.708-.708L7 5.293 9.959 8.25l3.65-4.563.781.624z" />
                <path fill-rule="evenodd" d="M10 3.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V4h-3.5a.5.5 0 0 1-.5-.5z" />
            </svg>
            &nbsp; Winning/Losing Margin
        </div>
    </button>
    <div class="container-fluid panel" width="100%" style="width:100%;">
        <figure class="highcharts-figure" style="align-content:center; height:80%">
            <div id="points-diff"></div>
        </figure>

    </div>

    <br />

    <br />

    <div class="container">
        <div class="row">
            <div class="col-sm">
                @{for (int i = 0; i < @Model.ResultsCount; i++)
                    {
                        if(@Model.Results.Count != 0)
                        {
                            Model.HomeTeam = Model.Results[i].ToString().Split("*")[0];
                            Model.HomeScore = Int32.Parse(Model.Results[i].ToString().Split("*")[1]);
                            Model.AwayTeam = Model.Results[i].ToString().Split("*")[2];
                            Model.AwayScore = Int32.Parse(Model.Results[i].ToString().Split("*")[3]);
                        }
                        else
                        {
                            Model.HomeTeam = Model.DBResults[i].ToString().Split("*")[5];
                            Model.HomeScore = Int32.Parse(Model.DBResults[i].ToString().Split("*")[6]);
                            Model.AwayTeam = Model.DBResults[i].ToString().Split("*")[7];
                            Model.AwayScore = Int32.Parse(Model.DBResults[i].ToString().Split("*")[8]);
                        }

                        if (@Model.HomeTeam.Contains(@Model.TeamName))
                        {
                            if (Model.HomeScore > Model.AwayScore)
                            {
                                <p style="color: green">@Model.HomeTeam: @Model.HomeScore v @Model.AwayTeam: @Model.AwayScore</p>
                            }
                            else if (Model.HomeScore < Model.AwayScore)
                            {
                                <p style="color: red">@Model.HomeTeam: @Model.HomeScore v @Model.AwayTeam: @Model.AwayScore</p>
                            }
                            else
                            {
                                <p>@Model.HomeTeam: @Model.HomeScore v @Model.AwayTeam: @Model.AwayScore</p>
                            }
                        }
                        else
                        {
                            continue;
                        }
                    }
                }

            </div>
            <div class="col-sm">

                @{for (int i = 0; i < @Model.ResultsCount; i++)
                    {
                        if (@Model.Results.Count != 0)
                        {
                            Model.HomeTeam = Model.Results[i].ToString().Split("*")[0];
                            Model.HomeScore = Int32.Parse(Model.Results[i].ToString().Split("*")[1]);
                            Model.AwayTeam = Model.Results[i].ToString().Split("*")[2];
                            Model.AwayScore = Int32.Parse(Model.Results[i].ToString().Split("*")[3]);
                        }
                        else
                        {
                            Model.HomeTeam = Model.DBResults[i].ToString().Split("*")[5];
                            Model.HomeScore = Int32.Parse(Model.DBResults[i].ToString().Split("*")[6]);
                            Model.AwayTeam = Model.DBResults[i].ToString().Split("*")[7];
                            Model.AwayScore = Int32.Parse(Model.DBResults[i].ToString().Split("*")[8]);
                        }

                        if (@Model.AwayTeam.Contains(@Model.TeamName))
                        {
                            if (Model.AwayScore > Model.HomeScore)
                            {
                                <p style="color: green">@Model.HomeTeam: @Model.HomeScore v @Model.AwayTeam: @Model.AwayScore</p>
                            }
                            else if (Model.AwayScore < Model.HomeScore)
                            {
                                <p style="color: red">@Model.HomeTeam: @Model.HomeScore v @Model.AwayTeam: @Model.AwayScore</p>
                            }
                            else
                            {
                                <p>@Model.HomeTeam: @Model.HomeScore v @Model.AwayTeam: @Model.AwayScore</p>
                            }
                        }
                        else
                        {
                            continue;
                        }
                    }
                }
                
            </div>
        </div>
    </div>
</div>

<script>
    var acc = document.getElementsByClassName("accordion");
    var i;

    for (i = 0; i < acc.length; i++) {
        acc[i].addEventListener("click", function () {
            /* Toggle between adding and removing the "active" class,
            to highlight the button that controls the panel */
            this.classList.toggle("active");

            /* Toggle between hiding and showing the active panel */
            var panel = this.nextElementSibling;
            if (panel.style.display === "block") {
                panel.style.display = "none";
            } else {
                panel.style.display = "block";
            }
        });
    }
</script>

<script scr="Graph.js">
   Highcharts.chart('points', {
    chart: {
        type: 'line'
    },
    title: {
        text: 'Goals/Points Scored Per Game'
    },
    subtitle: {
        text: 'Results'
    },
    xAxis: {
        categories: [


        ],
        crosshair: true
    },
    yAxis: {
        min: 0,
        title: {
            text: 'Points Scored'
        }
    },
    tooltip: {
        headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
        pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
            '<td style="padding:0"><b>{point.y:.1f} Pts</b></td></tr>',
        footerFormat: '</table>',
        shared: true,
        useHTML: true
    },
    plotOptions: {
        column: {
            pointPadding: 1,
            borderWidth: 0
        }
    },


    series: [{
        name: 'Home',
        color: '#011b51',
        data: [
                   @for (int i = 0; i < Model.HomeScoredList.Count; i++)
                        {
                           @(@Model.HomeScoredList[i] + ",");
                        }

                ,]

            }, {
    name: 'Away',
        color: '#d51b1b',
            data: [
                   @for (int i = 0; i < Model.AwayScoredList.Count; i++)
                        {
                          @(@Model.AwayScoredList[i] + ",");
                        }
                ,]

}]

        });
</script>

<script>
    Highcharts.chart('wins', {
        chart: {
            type: 'bar'
        },
        title: {
            text: 'Wins/Losses'
        },
        subtitle: {
            text: 'Wins/Losses'
        },
        xAxis: {
            categories: ["Wins", "Losses", "Draws"


            ],
            crosshair: true
        },
        yAxis: {
            min: 0,
            title: {
                text: 'Wins/Losses'
            }
        },
        tooltip: {
            headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
            pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                '<td style="padding:0"><b>{point.y:.1f} W/L</b></td></tr>',
            footerFormat: '</table>',
            shared: true,
            useHTML: true
        },
        plotOptions: {
            column: {
                pointPadding: 0.2,
                borderWidth: 0
            }
        },


        series: [{
            name: 'Home',
            color: '#011b51',
            data: [

                        @{
                          @(@Model.HomeWins + "," + Model.HomeLosses + "," + Model.HomeDraws);
                        }
                ,]

            }, {
                name: 'Away',
                color: '#d51b1b',
                data: [
                        @{
                          @(@Model.AwayWins + "," + Model.AwayLosses + "," + Model.AwayDraws);
                        }

                ,]

            }]

    });

     Highcharts.chart('points-diff', {
            chart: {
                type: 'line'
            },
            title: {
                text: 'Winning/Losing Margin'
            },
            subtitle: {
                text: 'Winning/Losing Margin'
            },
            xAxis: {
                categories: [


                ],
                crosshair: true
            },
            yAxis: {
                title: {
                    text: 'Winning/Losing Margin'
                }
            },
            tooltip: {
                headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                    '<td style="padding:0"><b>{point.y:.1f} W/L</b></td></tr>',
                footerFormat: '</table>',
                shared: true,
                useHTML: true
            },
            plotOptions: {
                column: {
                    pointPadding: 0.2,
                    borderWidth: 0
                }
            },


            series: [{
                name: 'Home',
                color: '#011b51',
                data: [
                        @for (int i = 0; i < Model.HomeMarginList.Count; i++)
                        {
                          @(@Model.HomeMarginList[i] + ",");
                        }

                ,]

            }, {
                name: 'Away',
                color: '#d51b1b',
                data: [
                        @for (int i = 0; i < Model.AwayMarginList.Count; i++)
                       {
                          @(@Model.AwayMarginList[i] + ",");
                        }

                ,]

            }]

        });
</script>